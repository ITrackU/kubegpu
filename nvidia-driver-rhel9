# **NVIDIA Driver Installation on RHEL 9 (`.run` Method)**
*Disable Nouveau, install proprietary drivers, and configure GPU acceleration*

---

## **‚ö†Ô∏è Prerequisites & Warnings**
1. **Secure Boot**: Disable it in BIOS or [enroll a MOK key](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/assembly_working-with-the-kernel-using-grub2_managing-monitoring-and-updating-the-kernel#doc-wrapper) later.
2. **Root Access**: All commands requiring `sudo` must be run as root.
3. **Backup**: Take a snapshot or backup critical data before proceeding.
4. **Network**: Ensure internet access for downloading drivers/dependencies.

---

## **üìã Step-by-Step Installation**

### **1. Verify GPU & Secure Boot Status**
```bash
# Check GPU detection
lspci | grep -E "VGA|3D|NVIDIA"

# Check Secure Boot (disable if enabled)
mokutil --sb-state
```

---

### **2. Update System & Install Dependencies**
```bash
# Update all packages
sudo dnf update -y && sudo dnf upgrade -y

# Install build tools
sudo dnf install -y \
  kernel-devel-$(uname -r) kernel-headers \
  gcc make dkms \
  libglvnd-glx libglvnd-opengl libglvnd-devel \
  pkgconfig acpid
```

> **Note**: If `dkms` or `epel-release` are missing, see [Troubleshooting](#13-troubleshooting).

---

### **3. Blacklist Nouveau (Critical!)**
```bash
# Create blacklist file
sudo tee /etc/modprobe.d/blacklist-nouveau.conf <<EOF
blacklist nouveau
options nouveau modeset=0
EOF

# Configure dracut to exclude Nouveau
echo 'omit_dracutmodules+=" nouveau "' | sudo tee /etc/dracut.conf.d/nouveau.conf

# Rebuild initramfs (force exclude Nouveau)
sudo dracut -f --omit-drivers nouveau /boot/initramfs-$(uname -r).img $(uname -r)

# Update kernel command line
sudo grubby --update-kernel=ALL --args="rd.driver.blacklist=nouveau modprobe.blacklist=nouveau nouveau.modeset=0"
```

---

### **4. Rebuild GRUB & Set Default Kernel**
```bash
# Regenerate GRUB config
sudo grub2-mkconfig -o /boot/grub2/grub.cfg

# (Optional) Set default kernel explicitly
sudo grubby --set-default /boot/vmlinuz-$(uname -r)
```

---

### **5. Reboot into Multi-User Mode**
```bash
# Switch to text mode (no GUI)
sudo systemctl set-default multi-user.target
sudo reboot
```

> **‚ö†Ô∏è After reboot**, you‚Äôll land in a **text-only console** (no GUI). Log in with your credentials.

---

### **6. Download & Run NVIDIA Installer**
```bash
# Download the driver (replace URL with latest version)
wget https://us.download.nvidia.com/tesla/535.261.03/NVIDIA-Linux-x86_64-535.261.03.run

# Make executable and run
chmod +x NVIDIA-Linux-x86_64-*.run
sudo ./NVIDIA-Linux-x86_64-*.run
```

**Installer Prompts:**
- Accept the **license agreement**.
- Allow the installer to **compile kernel modules**.
- **Do not** install the 32-bit compatibility libraries (unless needed).
- Let it **update your Xorg config**.

---

### **7. (Optional) Re-enable Graphical Boot**
```bash
sudo systemctl set-default graphical.target
sudo reboot
```

---

### **8. Verify Installation**
```bash
# Check driver load status
nvidia-smi

# Verify kernel module
lsmod | grep nvidia
```

Expected output:
```
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 535.261.03   Driver Version: 535.261.03   CUDA Version: 12.2     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Tesla T4            Off  | 00000000:00:1E.0 Off |                    0 |
| N/A   34C    P0    25W /  70W |      0MiB / 15360MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
```

---

## **üîß Troubleshooting**

### **1. Nouveau Still Loading?**
If `lsmod | grep nouveau` shows the module is active:
```bash
# Force-unload Nouveau
sudo rmmod nouveau
sudo dracut -f /boot/initramfs-$(uname -r).img $(uname -r)
sudo reboot
```

### **2. Missing `dkms` or EPEL**
```bash
# Install EPEL and DKMS manually
sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
sudo dnf install -y dkms
```

### **3. Driver Fails to Compile**
- Ensure `kernel-devel` matches your running kernel:
  ```bash
  sudo dnf install kernel-devel-$(uname -r)
  ```
- Check `/var/log/nvidia-installer.log` for errors.

### **4. Black Screen After Reboot**
- Boot into **rescue mode** (edit GRUB ‚Üí add `systemd.unit=rescue.target`).
- Re-run the NVIDIA installer with `--uninstall` and retry.

### **5. Secure Boot Blocking Driver**
- **Option 1**: Disable Secure Boot in BIOS.
- **Option 2**: Sign the NVIDIA module:
  ```bash
  sudo mokutil --import /var/lib/dkms/nvidia/535.261.03/5.14.0-284.11.1/x86_64/module/nvidia.ko
  ```
  (Replace paths with your actual kernel/driver version.)

---

## **üßπ Cleanup**
```bash
# Remove temporary files
sudo dnf clean all
rm -f ~/NVIDIA-Linux-x86_64-*.run
```

---

## **üìå Next Steps**
- [Install NVIDIA Container Toolkit](NVIDIA-CONTAINER-TOOLKIT-INSTALLATION) (for GPU-accelerated containers).
- [Verify CUDA Support](CUDA-VERIFICATION) (if using AI/ML workloads).

---
### **üîó References**
- [NVIDIA Linux Driver Documentation](https://download.nvidia.com/XFree86/Linux-x86_64/535.261.03/README/index.html)
- [RHEL 9 Kernel Management](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/index)
